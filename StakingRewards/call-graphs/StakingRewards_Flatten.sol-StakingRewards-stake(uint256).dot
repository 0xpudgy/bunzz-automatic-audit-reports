digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: IF 1

EXPRESSION:
amount <= 0

IRs:
TMP_131(bool) = amount <= 0
CONDITION TMP_131"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert ZeroAmount()()

IRs:
TMP_132(None) = SOLIDITY_CALL revert ZeroAmount()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = totalSupply + amount

IRs:
TMP_133(uint256) = totalSupply (c)+ amount
totalSupply(uint256) := TMP_133(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[msg.sender] += amount

IRs:
REF_31(uint256) -> balances[msg.sender]
REF_31(-> balances) = REF_31 (c)+ amount"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
stakingToken.safeTransferFrom(msg.sender,address(this),amount)

IRs:
TMP_134 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['stakingToken', 'msg.sender', 'TMP_134', 'amount'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Staked(msg.sender,amount)

IRs:
Emit Staked(msg.sender,amount)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuard.nonReentrant()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
whenNotPaused()

IRs:
MODIFIER_CALL, Pausable.whenNotPaused()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
updateReward(msg.sender)

IRs:
MODIFIER_CALL, StakingRewards.updateReward(address)(msg.sender)"];
10->1;
}
