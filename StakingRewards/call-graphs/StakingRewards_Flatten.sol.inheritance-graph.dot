digraph "" {
Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkOwner()</TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

Pausable -> Context;
Pausable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Pausable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    paused()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _requireNotPaused()</TD></TR><TR><TD align="left">    _requirePaused()</TD></TR><TR><TD align="left">    _pause()</TD></TR><TR><TD align="left">    _unpause()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    whenNotPaused()</TD></TR><TR><TD align="left">    whenPaused()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _paused</TD></TR></TABLE> >];

IERC20Permit[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Permit</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    permit(address,address,uint256,uint256,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    nonces(address)</TD></TR><TR><TD align="left">    DOMAIN_SEPARATOR()</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

Address[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Address</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes)</TD></TR><TR><TD align="left">    functionDelegateCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR><TR><TD align="left">    _revert(bytes,string)</TD></TR></TABLE> >];

SafeERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeERC20</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    safeTransfer(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(IERC20,address,address,uint256)</TD></TR><TR><TD align="left">    safeApprove(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeIncreaseAllowance(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safeDecreaseAllowance(IERC20,address,uint256)</TD></TR><TR><TD align="left">    safePermit(IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    _callOptionalReturn(IERC20,bytes)</TD></TR></TABLE> >];

ReentrancyGuard[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _nonReentrantBefore()</TD></TR><TR><TD align="left">    _nonReentrantAfter()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _NOT_ENTERED</TD></TR><TR><TD align="left">    _ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR></TABLE> >];

IStakingRewards[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IStakingRewards</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    earned(address)</TD></TR><TR><TD align="left">    getRewardForDuration()</TD></TR><TR><TD align="left">    lastTimeRewardApplicable()</TD></TR><TR><TD align="left">    rewardPerToken()</TD></TR><TR><TD align="left">    stake(uint256)</TD></TR><TR><TD align="left">    unstake(uint256)</TD></TR><TR><TD align="left">    claim()</TD></TR><TR><TD align="left">    exit()</TD></TR></TABLE> >];

StakingRewards -> IStakingRewards [ label="1" ];
StakingRewards -> Ownable [ label="2" ];
StakingRewards -> Pausable [ label="3" ];
StakingRewards -> ReentrancyGuard [ label="4" ];
StakingRewards[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StakingRewards</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setRewardsDuration(uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    stake(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    unstake(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    claim()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    exit()</font></TD></TR><TR><TD align="left">    fund(uint256)</TD></TR><TR><TD align="left">    recoverERC20(address,uint256)</TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    lastTimeRewardApplicable()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    rewardPerToken()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    earned(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRewardForDuration()</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _lastTimeRewardApplicable()</TD></TR><TR><TD align="left">    _rewardPerToken()</TD></TR><TR><TD align="left">    _earned(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    updateReward(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    stakingToken<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    rewardsToken<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    periodFinish</TD></TR><TR><TD align="left">    rewardRate</TD></TR><TR><TD align="left">    rewardsDuration</TD></TR><TR><TD align="left">    lastUpdateTime</TD></TR><TR><TD align="left">    rewardPerTokenStored</TD></TR><TR><TD align="left">    userRewardPerTokenPaid</TD></TR><TR><TD align="left">    rewards</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    totalSupply</TD></TR><TR><TD align="left">    balances</TD></TR></TABLE> >];

}